#!/usr/bin/python3

#
# Copyright (C) 2020, 2021, 2022, 2023, 2024 Humanitarian OpenstreetMap Team
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

import argparse
import csv
import logging
import os
import re
import sys
from collections import OrderedDict
from datetime import datetime
from pathlib import Path
import xmltodict
from osm_fieldwork.convert import Convert
from osm_fieldwork.ODKInstance import ODKInstance
from osm_fieldwork.support import OutSupport

# Instantiate logger
log = logging.getLogger(__name__)

class OdkDump(Convert):
    def __init__(
            self,
            yaml: str = None,
    ):
        self.config = super().__init__(yaml)

def main():
    """This is a program that reads in the ODK Instance file, which is in XML,
    and converts it to an OSM XML file so it can be viewed in an editor.
    """
    parser = argparse.ArgumentParser(description="Convert ODK XML instance file to OSM XML format")
    parser.add_argument("-v", "--verbose", nargs="?", const="0", help="verbose output")
    parser.add_argument("-y", "--yaml", help="Alternate YAML file")
    parser.add_argument("-x", "--xlsfile", help="Source XLSFile")
    parser.add_argument("-i", "--instance", required=True, help="The instance file(s) from ODK Collect")
    # parser.add_argument("-o","--outfile", default='tmp.csv', help='The output file for JOSM')
    args = parser.parse_args()

    # if verbose, dump to the terminal
    if args.verbose is not None:
        logging.basicConfig(
            level=logging.DEBUG,
            format=("%(threadName)10s - %(name)s - %(levelname)s - %(message)s"),
            datefmt="%y-%m-%d %H:%M:%S",
            stream=sys.stdout,
        )

    xmlfiles = list()
    if args.instance.find("*") >= 0:
        toplevel = Path()
        for dir in toplevel.glob(args.instance):
            if dir.is_dir():
                xml = os.listdir(dir)
                # There is always only one XML file per instance
                full = os.path.join(dir, xml[0])
                xmlfiles.append(full)
    else:
        toplevel = Path(args.instance)
        if toplevel.is_dir():
            # There is always only one XML file per instance
            full = os.path.join(toplevel, os.path.basename(toplevel))
            xmlfiles.append(full + ".xml")

    now = datetime.now()
    timestamp = f"-{now.year}_{now.month}_{now.day}_{now.hour}_{now.minute}"
    result = re.search("[*0-9-_]*$", args.instance)
    base = args.instance[:result.start()]
    jsonoutfile = f"{base}{timestamp}.geojson"
    jsonout = OutSupport(jsonoutfile)

    osmoutfile = f"{base}{timestamp}.osm"
    osmout = OutSupport(osmoutfile)

    # These are all generated by Collect, and can be ignored
    files = list()
    convert = Convert()
    convert.parseXLS(args.xlsfile)
    for instance in xmlfiles:
        logging.info(f"Processing instance {instance}")
        odk = ODKInstance(instance)
        entry = convert.createEntry(odk.data)
        jsonout.writeGeoJson(entry)
        osmout.writeOSM(entry)

    print("Wrote: %s" % osmoutfile)
    print("Wrote: %s" % jsonoutfile)

if __name__ == "__main__":
    """This is just a hook so this file can be run standlone during development."""
    main()
